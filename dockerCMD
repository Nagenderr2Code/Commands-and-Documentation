Docker Commands:

— Check the version of docker :  docker version
— Get more Info on docker : docker Info
— Get Help on Docker Commands : docker 
		Management Commands:
  			builder     Manage builds
	   		config      Manage Docker configs
			  container   Manage containers
			  image       Manage images
			  network     Manage networks
			  node        Manage Swarm nodes
			  plugin      Manage plugins
			  secret      Manage Docker secrets
			  service     Manage services
			  stack       Manage Docker stacks
			  swarm       Manage Swarm
			  system      Manage Docker
			  trust       Manage trust on Docker images
			  volume      Manage volumes
— Run Ngnix server : docker container run --publish 80:80 nginx
		Checks if the ngnix image is already pulled and if not already get the new one and starts the server on port 8080

— Run ngnix server in detached mode : docker container run --publish 80:80 --detach  nginx
— Run ngnix server in detached mode : docker container run --publish 80:80 --detach {C:name/ID} nginx
	container will start with the {C:name/ID} else start with some default name.
— docker container ls : List the running containers in docker

— docker ps : List the running containers in docker

— docker container ls -a : lists all the containers running & stopped

— docker container stop {{C:name/ID} : will stop the specified container

— docker container stop {C:name/ID} : will stop the specified container

— docker container logs {C:name/ID} : out puts the logs of the web server

— docker container rm cID1 cID2 cID3 : can be used to stop the multiple containers

— docker container rm -f cID1 cID2 cID3 : can be used to stop the multiple containers running container

— ps aux : lists  all the process running processes

— docker image ls : lists the images in the container

— docker container run --publish 3306:3306 --detach --name mysqlTest2 --env MYSQL_RANDOM_ROOT_PASSWORD=yes mysql : Command to run mysql server

— docker container stats {{C:name/ID}: performance stats for container

— docker container top {C:name/ID} : process list in container

— docker container inspect {containerName}: provide the meta-data of container

— docker container -t : Simulates the real terminal like SSH does

— > bash shell when run with -it will gives us the terminal inside the running terminal

— docker container exec -it {C:name/ID} bash : will SSH in to running container 

— docker container port {C:name/ID} : Gives the in/out ports of container

— docker container inspect —format ‘{{.NetworkSettings.IPAddress}}’ {C:name/ID} : Gives the IP address of the container

 Docker Network : CLI Management
— docker network ls : Lists the N/W
— docker network inspect {nw: name/ID}:  Provides the meta-data of the network
— docker network create --driver {nw: name}: Create the network
— docker network connect  {nw: name/ID} {C:name/ID}: Attach a N/W to container
— docker network disconnect {nw: name/ID} {C:name/ID}: Detach a network to Container 

Docker Network : DNS . Docker Daemon has a built-in DNS server that containers use by default

—docker commit {C:name/ID} {commitMessage}: this will take the snapshot of container.

--> docker network create {nameTheNetwork}: creates the network

--> docker image history {imageName}: Provides the history of changes made to specified image

--> docker image inspect {imageName}: Provides the JSON file with information regarding the specified image

--> docker image tag --help: Suggestions are provided regarding the tag command
--> docker image tag {Sourceimage:tag} {destImage:tag}: new image is create with the same image ID and provided imageName & Tag
--> docker login : logs-in to docker hub and the authentication ID is stores in JSON
--> docker logout: logs-out from the docker hub
--> docker image push {image:tag} or {image}: commits the image to docker hub
--> docker container prune : removes all stoped containers
--> docker image prune: removes all unused images. which are not linked to any containers
--> docker image prune -a: removes all unused images. Which are not linked to any contianers.
--> docker system prune: Will clean up everything
--> docker system df: To see the space usage.
--> docker volume inspect {volumeName}: CMD to inspect to specified volume
--> docker volume ls: list the volumes
-->  docker container run -d --name mysql1 -e MYSQL_ALLOW_EMPTY_PASSWORD=yes -v mysql_vol:/var/lib/mysql mysql : create and assign the volume to mysql


